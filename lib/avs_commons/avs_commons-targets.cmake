# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.8)
   message(FATAL_ERROR "CMake >= 2.8.0 required")
endif()
if(CMAKE_VERSION VERSION_LESS "2.8.3")
   message(FATAL_ERROR "CMake >= 2.8.3 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.8.3...3.23)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_cmake_targets_defined "")
set(_cmake_targets_not_defined "")
set(_cmake_expected_targets "")
foreach(_cmake_expected_target IN ITEMS avs_commons_global_headers avs_algorithm avs_buffer avs_list avs_utils avs_net_core avs_net_nosec avs_net_mbedtls avs_stream avs_stream_md5 avs_stream_net avs_log avs_rbtree avs_sched avs_url avs_persistence avs_compat_threading_pthread avs_compat_threading_atomic_spinlock avs_crypto_mbedtls avs_crypto_generic avs_crypto_core)
  list(APPEND _cmake_expected_targets "${_cmake_expected_target}")
  if(TARGET "${_cmake_expected_target}")
    list(APPEND _cmake_targets_defined "${_cmake_expected_target}")
  else()
    list(APPEND _cmake_targets_not_defined "${_cmake_expected_target}")
  endif()
endforeach()
unset(_cmake_expected_target)
if(_cmake_targets_defined STREQUAL _cmake_expected_targets)
  unset(_cmake_targets_defined)
  unset(_cmake_targets_not_defined)
  unset(_cmake_expected_targets)
  unset(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT _cmake_targets_defined STREQUAL "")
  string(REPLACE ";" ", " _cmake_targets_defined_text "${_cmake_targets_defined}")
  string(REPLACE ";" ", " _cmake_targets_not_defined_text "${_cmake_targets_not_defined}")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_cmake_targets_defined_text}\nTargets not yet defined: ${_cmake_targets_not_defined_text}\n")
endif()
unset(_cmake_targets_defined)
unset(_cmake_targets_not_defined)
unset(_cmake_expected_targets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
if(_IMPORT_PREFIX STREQUAL "/")
  set(_IMPORT_PREFIX "")
endif()

# Create imported target avs_commons_global_headers
add_library(avs_commons_global_headers INTERFACE IMPORTED)

set_target_properties(avs_commons_global_headers PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
)

# Create imported target avs_algorithm
add_library(avs_algorithm STATIC IMPORTED)

set_target_properties(avs_algorithm PROPERTIES
  INTERFACE_LINK_LIBRARIES "avs_commons_global_headers"
)

# Create imported target avs_buffer
add_library(avs_buffer STATIC IMPORTED)

set_target_properties(avs_buffer PROPERTIES
  INTERFACE_LINK_LIBRARIES "avs_commons_global_headers;avs_utils;avs_log"
)

# Create imported target avs_list
add_library(avs_list STATIC IMPORTED)

set_target_properties(avs_list PROPERTIES
  INTERFACE_LINK_LIBRARIES "avs_commons_global_headers;avs_utils"
)

# Create imported target avs_utils
add_library(avs_utils STATIC IMPORTED)

set_target_properties(avs_utils PROPERTIES
  INTERFACE_LINK_LIBRARIES "avs_commons_global_headers;avs_log"
)

# Create imported target avs_net_core
add_library(avs_net_core INTERFACE IMPORTED)

set_target_properties(avs_net_core PROPERTIES
  INTERFACE_LINK_LIBRARIES "avs_commons_global_headers;avs_log;avs_stream;avs_utils;avs_compat_threading_pthread"
)

# Create imported target avs_net_nosec
add_library(avs_net_nosec STATIC IMPORTED)

set_target_properties(avs_net_nosec PROPERTIES
  INTERFACE_LINK_LIBRARIES "avs_net_core"
)

# Create imported target avs_net_mbedtls
add_library(avs_net_mbedtls STATIC IMPORTED)

set_target_properties(avs_net_mbedtls PROPERTIES
  INTERFACE_LINK_LIBRARIES "avs_net_core;avs_crypto_mbedtls;mbedtls;mbedcrypto;mbedx509;avs_persistence"
)

# Create imported target avs_stream
add_library(avs_stream STATIC IMPORTED)

set_target_properties(avs_stream PROPERTIES
  INTERFACE_LINK_LIBRARIES "avs_commons_global_headers;avs_buffer;avs_log"
)

# Create imported target avs_stream_md5
add_library(avs_stream_md5 STATIC IMPORTED)

set_target_properties(avs_stream_md5 PROPERTIES
  INTERFACE_LINK_LIBRARIES "avs_stream;avs_crypto_mbedtls"
)

# Create imported target avs_stream_net
add_library(avs_stream_net STATIC IMPORTED)

set_target_properties(avs_stream_net PROPERTIES
  INTERFACE_LINK_LIBRARIES "avs_stream;avs_buffer;avs_net_core"
)

# Create imported target avs_log
add_library(avs_log STATIC IMPORTED)

set_target_properties(avs_log PROPERTIES
  INTERFACE_LINK_LIBRARIES "avs_commons_global_headers;avs_utils;avs_list;avs_compat_threading_pthread"
)

# Create imported target avs_rbtree
add_library(avs_rbtree STATIC IMPORTED)

set_target_properties(avs_rbtree PROPERTIES
  INTERFACE_LINK_LIBRARIES "avs_commons_global_headers;avs_utils"
)

# Create imported target avs_sched
add_library(avs_sched STATIC IMPORTED)

set_target_properties(avs_sched PROPERTIES
  INTERFACE_LINK_LIBRARIES "avs_commons_global_headers;avs_list;avs_log;avs_compat_threading_pthread"
)

# Create imported target avs_url
add_library(avs_url STATIC IMPORTED)

set_target_properties(avs_url PROPERTIES
  INTERFACE_LINK_LIBRARIES "avs_commons_global_headers;avs_stream;avs_utils;avs_log"
)

# Create imported target avs_persistence
add_library(avs_persistence STATIC IMPORTED)

set_target_properties(avs_persistence PROPERTIES
  INTERFACE_LINK_LIBRARIES "avs_commons_global_headers;avs_stream;avs_utils;avs_list;avs_rbtree"
)

# Create imported target avs_compat_threading_pthread
add_library(avs_compat_threading_pthread STATIC IMPORTED)

set_target_properties(avs_compat_threading_pthread PROPERTIES
  INTERFACE_LINK_LIBRARIES "avs_utils;avs_log"
)

# Create imported target avs_compat_threading_atomic_spinlock
add_library(avs_compat_threading_atomic_spinlock STATIC IMPORTED)

set_target_properties(avs_compat_threading_atomic_spinlock PROPERTIES
  INTERFACE_LINK_LIBRARIES "avs_utils;avs_log"
)

# Create imported target avs_crypto_mbedtls
add_library(avs_crypto_mbedtls STATIC IMPORTED)

set_target_properties(avs_crypto_mbedtls PROPERTIES
  INTERFACE_LINK_LIBRARIES "avs_crypto_core;mbedtls;mbedcrypto;mbedx509"
)

# Create imported target avs_crypto_generic
add_library(avs_crypto_generic STATIC IMPORTED)

set_target_properties(avs_crypto_generic PROPERTIES
  INTERFACE_LINK_LIBRARIES "avs_crypto_core"
)

# Create imported target avs_crypto_core
add_library(avs_crypto_core INTERFACE IMPORTED)

set_target_properties(avs_crypto_core PROPERTIES
  INTERFACE_LINK_LIBRARIES "avs_commons_global_headers;avs_utils;avs_log;avs_persistence"
)

if(CMAKE_VERSION VERSION_LESS 3.0.0)
  message(FATAL_ERROR "This file relies on consumers using CMake 3.0.0 or greater.")
endif()

# Load information for each installed configuration.
file(GLOB _cmake_config_files "${CMAKE_CURRENT_LIST_DIR}/avs_commons-targets-*.cmake")
foreach(_cmake_config_file IN LISTS _cmake_config_files)
  include("${_cmake_config_file}")
endforeach()
unset(_cmake_config_file)
unset(_cmake_config_files)

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(_cmake_target IN LISTS _cmake_import_check_targets)
  foreach(_cmake_file IN LISTS "_cmake_import_check_files_for_${_cmake_target}")
    if(NOT EXISTS "${_cmake_file}")
      message(FATAL_ERROR "The imported target \"${_cmake_target}\" references the file
   \"${_cmake_file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
    endif()
  endforeach()
  unset(_cmake_file)
  unset("_cmake_import_check_files_for_${_cmake_target}")
endforeach()
unset(_cmake_target)
unset(_cmake_import_check_targets)

# This file does not depend on other imported targets which have
# been exported from the same project but in a separate export set.

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
